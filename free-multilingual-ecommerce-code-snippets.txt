/** * Free Multilingual E-commerce With WordPress, WooCommerce & Polylang - Code contained in the book * * These code snippets are free software: you can redistribute them and/or modify * them under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 2 of the License, or * any later version. See <http://www.gnu.org/licenses/>. * * These snippets distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU General Public License for more details. * */ /** * @desc Chapter 10 - Multilingual WooCommerce Pages Routing * Section - Option One: Page Routing with default Shop Page slug from Permalinks Shop Base * @author woomultilingual.com * @return int $id */add_filter ( 'woocommerce_get_shop_page_id','woomulti_woocommerce_get_page_id' );add_filter ( 'woocommerce_get_cart_page_id','woomulti_woocommerce_get_page_id' );add_filter ( 'woocommerce_get_checkout_page_id','woomulti_woocommerce_get_page_id' );add_filter ( 'woocommerce_get_terms_page_id','woomulti_woocommerce_get_page_id' );add_filter ( 'woocommerce_get_myaccount_page_id','woomulti_woocommerce_get_page_id' );function woomulti_woocommerce_get_page_id( $id ) {   if ( function_exists ( 'pll_get_post' ) ) {      return pll_get_post( $id );   }   return $id;}/** * @desc Chapter 10 - Multilingual WooCommerce Pages Routing * Section - Option Two: Page Routing with Shop Page containing the page slug * @author Plugin author of Hyyan WooCommerce Poylang Integration and * woomultilingual.com, adapted for functions.php * $return int $id */add_filter( 'woocommerce_get_shop_page_id','woomulti_woocommerce_get_page_id' );add_filter( 'woocommerce_get_cart_page_id','woomulti_woocommerce_get_page_id' );add_filter( 'woocommerce_get_checkout_page_id','woomulti_woocommerce_get_page_id' );add_filter( 'woocommerce_get_terms_page_id','woomulti_woocommerce_get_page_id' );add_filter( 'woocommerce_get_myaccount_page_id','woomulti_woocommerce_get_page_id' );add_filter( 'option_woocommerce_shop_page_id','woomulti_woocommerce_get_page_id' );add_filter( 'option_woocommerce_cart_page_id','woomulti_woocommerce_get_page_id' );add_filter( 'option_woocommerce_checkout_page_id','woomulti_woocommerce_get_page_id' );add_filter( 'option_woocommerce_terms_page_id','woomulti_woocommerce_get_page_id' );add_filter( 'option_woocommerce_myaccount_page_id','woomulti_woocommerce_get_page_id' );//Get the id of translated postfunction woomulti_woocommerce_get_page_id ( $id ) {   if ( function_exists ( 'pll_get_post' ) ) {      return pll_get_post( $id );   }   return $id;}//Retrieve the translated shop URL (page slug)add_filter( 'pll_get_archive_url','woomulti_get_translated_shopurl', 10, 2 );function woomulti_get_translated_shopurl( $url, $language ) {   $result = $url;   if (!is_post_type_archive('product')) {      return $result;   }   $shopPageID = get_option( 'woocommerce_shop_page_id' );   $shopPage = get_post( $shopPageID );   if ( $shopPage ) {      $shopPageTranslatedID = pll_get_post( $shopPageID, $language );      $shopPageTranslation = get_post( $shopPageTranslatedID );      if ( $shopPageTranslation ) {         $result = str_replace( $shopPage->post_name, $shopPageTranslation->post_name, $url );      }   }   return $result;}//Ensuring that only products in the language of the Shop page are showingadd_filter( 'parse_request', 'woomulti_correctShopPage' );function woomulti_correctShopPage( $wp ) {   global $polylang;   $shopID = wc_get_page_id('shop');   $shopOnFront = ('page' === get_option('show_on_front')) && in_array(   get_option('page_on_front'),      $polylang->model->get_translations( 'post', $shopID ));   $vars = array('pagename', 'page', 'name');   foreach ($vars as $var) {      if (isset($wp->query_vars[$var])) {         $shopOnFront = false;         break;      }   }   if (!$shopOnFront) {      if ( pll_default_language() === pll_current_language() ||         empty($wp->query_vars['pagename']) ) {         return false;      }      $shopPage = get_post($shopID);      $page = explode('/', $wp->query_vars['pagename']);      if ( isset($shopPage->post_name) && $shopPage->post_name == $page[count($page) - 1] ) {         unset($wp->query_vars['page']);         unset($wp->query_vars['pagename']);         $wp->query_vars['post_type'] = 'product';      }   } else {      $wp->query_vars['post_type'] = 'product';   }}/** * @desc Chapter 11 - Cart Page – Return to Shop & Continue Shopping Redirect * @author woomultilingual.com * @return woocommerce_get_page_id */function woomulti_woocommerce_return_to_shop_redirect() {   if (function_exists ( 'pll_current_language' ) ) {      $currentlang = pll_current_language();      if ( $currentlang=="de" ) {         return site_url ( '/de/shop/' );      } elseif ( $currentlang=="fr" ){         return site_url ( '/fr/shop/' );      } else {         return get_permalink( woocommerce_get_page_id( 'shop' ) );      }   }}add_filter( 'woocommerce_return_to_shop_redirect', 'woomulti_woocommerce_return_to_shop_redirect' );add_filter( 'woocommerce_continue_shopping_redirect', 'woomulti_woocommerce_return_to_shop_redirect' );/** * @desc Chapter 12 - Product Attributes * Register WooCommmerce Product Attributes with Polylang * @author woomultilingual.com * @return $label */add_action( 'init', 'woomulti_register_product_attributes', 11, 2  );function woomulti_register_product_attributes() {   // Global variables to interact with both Polylang and WooCommerce   global $polylang, $woocommerce;   // Quit if Polylang or WooCommerce are not activated and ready   if ( !$polylang || !$woocommerce ) {      return false;   }   // Get the product attributes from WooCommerce   $product_attributes = wc_get_attribute_taxonomies();   // In Polylang Settings - String Translation you can group entries   $group = __( 'Product Attributes' );   // Get taxonomies already ready for translation by Polylang   $taxonomies = $polylang->model->get_translated_taxonomies();   // Create array to hold all product attributes as WooCommerce taxonomies   $attributes = array();   foreach ( $product_attributes as $product_attribute ) {   // Each product attribute label will be registered as a string in Polylang      pll_register_string ( $product_attribute->attribute_label, $product_attribute->attribute_label, $group );      //Add each attribute name (not the label) to the taxonomies array and adding "pa_" in front      $attributes[] = substr_replace( $product_attribute->attribute_name, 'pa_', 0, 0);   }   // Merge the product attributes with the existing taxonomies   $taxonomies = array_merge ( $taxonomies, $attributes );   // Adding array to Polylang's filter 'pll_get_taxonomies' so its values are available for translation   add_filter( 'pll_get_taxonomies', function () use ( $taxonomies ) { return $taxonomies; } );}add_filter( 'woocommerce_attribute_label', 'woomulti_translate_attribute_label' );function woomulti_translate_attribute_label ( $label ) {   return pll__( $label );}/** * @desc Chapter 16 * Section - Remove "Free" from Shipping Method Labels * @author woomultilingual.com * @return $label *///Remove shipping label addition: "(Free)"add_filter( 'woocommerce_cart_shipping_method_full_label', 'woomulti_remove_local_pickup_free_label', 10, 2 );function woomulti_remove_local_pickup_free_label($full_label, $method) {   $currentlang = get_bloginfo ( 'language' );   if ( $currentlang == "de-DE" ) {      $full_label = str_replace ( '(kostenlos)',"",$full_label );   } elseif ( $currentlang == "fr-FR" ) {      $full_label = str_replace ( '(Gratuit)',"",$full_label );   } else {      $full_label = str_replace ( '(Free)', "", $full_label );   }   return $full_label;}/** * @desc Chapter 21 - Multilingual Shop Page <title> tag * @author woomultilingual.com * @return string $titletag */if( function_exists ( 'pll_register_string' ) ){   $group_shop_archive_titletag = __( 'Shop Page Title Tag' );   pll_register_string ( 'Shop Page Title (HTML Tag)', 'Shop Page Title Tag', $group_shop_archive_titletag );}function woomulti_shop_archive_title( $titletag ) {   if ( is_shop() ) {      return str_replace( __( 'Products', 'woocommerce' ), pll__( 'Shop Page Title Tag' ), $titletag );   }   return $titletag;}add_filter( 'wp_title', 'woomulti_shop_archive_title' );/** * @desc Chapter 22 - “Add to Cart” Label * @author woomultilingual.com * @return $translate_atc *///Use gettext filter to change "Add to Cart" Labelsadd_filter ( 'gettext', 'multiwoo_translate_atc' );add_filter ( 'ngettext', 'multiwoo_translate_atc' );function multiwoo_translate_atc( $translate_atc, $text, $domain ) {   if ( 'woocommerce' === $domain ) {      $currentlang = get_bloginfo ( 'language' );      if ( $currentlang=="de-DE" ) {         $translate_atc = str_ireplace ( ' Add to Cart', 'In den Warenkorb', $translate_atc );      } else {      if ( $currentlang=="fr-FR" ) {         $translate_atc = str_ireplace ( ' Add to Cart', 'ajouter au panier', $translate_atc );      }   }   return $translate_atc;}/** * @desc Chapter 23 - Troubleshooting AJAX Issues – Cart & Checkout Page * @author woomultilingual.com * @return $translate_atc *///Resolves Problem with translation of order summary (loaded via ajax) on checkout pageadd_filter ( 'wc_checkout_params', 'woomulti_translate_ajax' );add_filter( 'wc_cart', 'woomulti_translate_ajax' );add_filter( 'wc_cart_fragments_params', 'woomulti_translate_ajax' );add_filter( 'wc_add_to_cart_params', 'woomulti_translate_ajax' );function woomulti_translate_ajax ( $params ) {   $params['ajax_url'] = $params['ajax_url']. '?lang=' . pll_current_language();   return $params;}/** * @desc Chapter 24 - Cart Validation – Avoiding Multilingual Product Duplication * @author woomultilingual.com * @return $passed *///Custom function to validate the cartfunction woomulti_validate_add_cart_item ( $passed ) {   $sku_number_digits = 4;   if( function_exists('pll_current_language') {      global $woocommerce;      //Retrieve the SKU from the cart content      foreach($woocommerce->cart->get_cart() as $cart_item_key => $values ) {         $sku = $values['data']->get_sku();      }      //Retrieve the ID of the product being added to the cart      $product_id = apply_filters( 'woocommerce_add_to_cart_product_id', absint( $_REQUEST['add-to-cart'] ) );      $product = new WC_Product($product_id);      //Retrieve the SKU of the product being added to the cart      $woomulti_sku = $product->get_sku();      //Variables $woomulti_sku and $sku contain the first four letters of SKU      $woomulti_sku = substr ( $woomulti_sku, 0, $sku_number_digits );      $sku = substr ( $sku, 0, $sku_number_digits );      //Display WooCommerce error notice if the SKU (without language code)      //is identical with SKU of product already in the cart      if ( ! $sku ) {         return $passed;      } else {         if( $woomulti_sku == $sku ) {            $passed = false;            $currentlang = pll_current_language ();            switch ( $currentlang ) {               case 'de':                  wc_add_notice( 'Sie haben bereits dieses Produkt in einer anderen Sprache im Warenkorb.', 'error' );                  return $passed;                  break;               case 'fr':                  wc_add_notice( 'Vous avez déja ajouté ce produit au panier dans une autre langue.', 'error' );                  return $passed;                  break;               default:                  wc_add_notice( 'You have already placed this product in the cart in another language.', 'error' );                  return $passed;            }         }     }   }}add_filter( 'woocommerce_add_to_cart_validation', 'woomulti_validate_add_cart_item', 10, 5 ); /** * @desc Chapter 26 - Tips for Hard-to-reach Strings – Nested Options Arrays & pll_register_string * IMPORTANT! Do not use on a live server! This is simply for "dumping" the options with name that you define with "get_option('xxx_options) * Replace "xxx" with the actual name of the options you want to dump * @author woomultilingual.com * @return $content */add_action ( 'the_content', 'woomulti_option_dump' );function woomulti_option_dump ($content) {   $content = var_dump ( get_option('xxx_options') );   return $content;}/** * Chapter - Useful Links & Info  * Code for resetting WooCommerce options as used in chapter 16 (Checkout Options) - Commented out, so you need to remove /* in the next line and */ at the end * Adapt code for other options you want to reset (shipping, etc.)/*$bacs_options = array(	'title' => 'Direct Bank Transfer',	'description' => 'Make your payment directly into our bank account. Please use your Order ID as the payment reference. Your order won\'t be shipped until the funds have cleared in our account.',	'instructions' => 'Make your payment directly into our bank account. Please use your Order ID as the payment reference. Your order won\'t be shipped until the funds have cleared in our account.');$cheque_options = array(	'title' => 'Cheque Payment',	'description' => 'Pay via PayPal; you can pay with your credit card if you don\'t have a PayPal account.',	'instructions' => 'Pay via PayPal; you can pay with your credit card if you don\'t have a PayPal account.',	);$cod_options = array(	'title' => 'Cash on Delivery',	'description' => 'Pay with cash upon delivery.',	'instructions' => 'Pay with cash upon delivery.',	);$paypal_options = array(	'title' => 'PayPal',	'description' => 'Pay via PayPal; you can pay with your credit card if you don\'t have a PayPal account.',);update_option( 'woocommerce_bacs_settings', $bacs_options );update_option( 'woocommerce_cheque_settings', $cheque_options );update_option( 'woocommerce_cod_settings', $cod_options );update_option( 'woocommerce_paypal_settings', $paypal_options );delete_option( 'woocommerce_bacs_settings' );delete_option( 'woocommerce_cheque_settings' );delete_option( 'woocommerce_cod_settings' );delete_option( 'woocommerce_paypal_settings' );*/